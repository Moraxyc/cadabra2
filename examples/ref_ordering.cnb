{
	"cell_id": 12537442009270116517,
	"cells": [
		{
			"cell_id": 5200063121966218726,
			"cell_origin": "client",
			"cell_type": "latex",
			"cells": [
				{
					"cell_id": 10749627117119289384,
					"cell_origin": "client",
					"cell_type": "latex_view",
					"source": "\\section*{Symbol ordering and commutation properties}\n\nA conventional way to sort factors in a product is to use\nlexographical ordering. However, this is almost never what one wants\nwhen transcribing a physics problem to the computer. Therefore, Cadabra\nallows you to specify the sort order of symbols yourself. This is done\nby associating the \\prop{SortOrder} list property to a list of\nsymbols, as in"
				}
			],
			"hidden": true,
			"source": "\\section*{Symbol ordering and commutation properties}\n\nA conventional way to sort factors in a product is to use\nlexographical ordering. However, this is almost never what one wants\nwhen transcribing a physics problem to the computer. Therefore, Cadabra\nallows you to specify the sort order of symbols yourself. This is done\nby associating the \\prop{SortOrder} list property to a list of\nsymbols, as in"
		},
		{
			"cell_id": 4630586668004954392,
			"cell_origin": "client",
			"cell_type": "input",
			"cells": [
				{
					"cell_id": 9786594162868805709,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"cells": [
						{
							"cell_id": 16849266693056721115,
							"cell_origin": "server",
							"cell_type": "input_form",
							"source": "X X G A A B"
						}
					],
					"source": "\\begin{dmath*}{}X X G A A B\\end{dmath*}"
				}
			],
			"source": "{X,G,Y,A,B}::SortOrder.\nex:= A*B*G*X*A*X:\nsort_product(_);"
		},
		{
			"cell_id": 1219183121018762363,
			"cell_origin": "client",
			"cell_type": "latex",
			"cells": [
				{
					"cell_id": 8650713722243272991,
					"cell_origin": "client",
					"cell_type": "latex_view",
					"source": "More complicated objects with indices are of course also allowed, such\nas in"
				}
			],
			"hidden": true,
			"source": "More complicated objects with indices are of course also allowed, such\nas in"
		},
		{
			"cell_id": 1626051978006702516,
			"cell_origin": "client",
			"cell_type": "input",
			"cells": [
				{
					"cell_id": 11261042148179910614,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"source": "\\begin{dmath*}{}\\text{Property SortOrder attached to~}\\left[W_{m n}, \\discretionary{}{}{}W_{m}\\right].\\end{dmath*}"
				},
				{
					"cell_id": 10510303686589897558,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"cells": [
						{
							"cell_id": 16107899499185766672,
							"cell_origin": "server",
							"cell_type": "input_form",
							"source": "W_{m n} W_{q r} W_{p} W_{s} W_{t}"
						}
					],
					"source": "\\begin{dmath*}{}W_{m n} W_{q r} W_{p} W_{s} W_{t}\\end{dmath*}"
				}
			],
			"source": "{ W_{m n}, W_{m} }::SortOrder;\nex:= W_{m n} W_{p} W_{q r} W_{s} W_{t}:\nsort_product(_);"
		},
		{
			"cell_id": 817057946295541244,
			"cell_origin": "client",
			"cell_type": "latex",
			"cells": [
				{
					"cell_id": 3438182820960176836,
					"cell_origin": "client",
					"cell_type": "latex_view",
					"source": "It is not allowed to have more than one such set\ncontain the same symbol. Thus,"
				}
			],
			"hidden": true,
			"source": "It is not allowed to have more than one such set\ncontain the same symbol. Thus,"
		},
		{
			"cell_id": 281481927617357016,
			"cell_origin": "client",
			"cell_type": "input",
			"cells": [
				{
					"cell_id": 16144396283803958279,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"source": "\\begin{dmath*}{}\\text{Property SortOrder attached to~}\\left[X, \\discretionary{}{}{}G\\right].\\end{dmath*}"
				},
				{
					"cell_id": 124040221032259103,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"source": "\\begin{dmath*}{}\\text{Property SortOrder attached to~}\\left[X, \\discretionary{}{}{}A, \\discretionary{}{}{}B\\right].\\end{dmath*}"
				}
			],
			"source": "{X,G}::SortOrder;\n{X,A,B}::SortOrder;"
		},
		{
			"cell_id": 125055683918759571,
			"cell_origin": "client",
			"cell_type": "latex",
			"cells": [
				{
					"cell_id": 15140788470240326016,
					"cell_origin": "client",
					"cell_type": "latex_view",
					"source": "is not allowed (and will, in fact, take $X$ out of the first list)."
				}
			],
			"hidden": true,
			"source": "is not allowed (and will, in fact, take $X$ out of the first list)."
		},
		{
			"cell_id": 7891865129573028133,
			"cell_origin": "client",
			"cell_type": "input",
			"cells": [
				{
					"cell_id": 1176829512545785359,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"cells": [
						{
							"cell_id": 7607187409447219690,
							"cell_origin": "server",
							"cell_type": "input_form",
							"source": "X G A B"
						}
					],
					"source": "\\begin{dmath*}{}X G A B\\end{dmath*}"
				}
			],
			"source": "ex:= A*B*G*X:\nsort_product(_);"
		},
		{
			"cell_id": 10703969584082137669,
			"cell_origin": "client",
			"cell_type": "latex",
			"cells": [
				{
					"cell_id": 12608645003842560868,
					"cell_origin": "client",
					"cell_type": "latex_view",
					"source": "Apart from the preferred sort order, there are more properties which\ninfluence the way in which products can be sorted. In particular, sort\norder is influenced by whether symbols commute or anti-commute with\neach other.  Physicists in general use a very implicit notation as far\nas commutativity of objects in a product is concerned. Consider for\ninstance a situation in which we deal with two operators $\\hat M$ and\n$\\hat N$, as well as some constants $q$ and $p$. These two expressions\nare equivalent:\n\\begin{equation}\n2q\\, \\hat M p \\hat N \\quad\\text{and}\\quad 2pq\\, \\hat M \\hat N \\,.\n\\end{equation}\nBut this is not obvious from the notation that has been used to\nindicate the product. In fact, the product symbol is usually left out\ncompletely."
				}
			],
			"hidden": true,
			"source": "Apart from the preferred sort order, there are more properties which\ninfluence the way in which products can be sorted. In particular, sort\norder is influenced by whether symbols commute or anti-commute with\neach other.  Physicists in general use a very implicit notation as far\nas commutativity of objects in a product is concerned. Consider for\ninstance a situation in which we deal with two operators $\\hat M$ and\n$\\hat N$, as well as some constants $q$ and $p$. These two expressions\nare equivalent:\n\\begin{equation}\n2q\\, \\hat M p \\hat N \\quad\\text{and}\\quad 2pq\\, \\hat M \\hat N \\,.\n\\end{equation}\nBut this is not obvious from the notation that has been used to\nindicate the product. In fact, the product symbol is usually left out\ncompletely."
		},
		{
			"cell_id": 4605361587650520474,
			"cell_origin": "client",
			"cell_type": "latex",
			"cells": [
				{
					"cell_id": 3090531545332464049,
					"cell_origin": "client",
					"cell_type": "latex_view",
					"source": "\nIn many other computer algebra systems, you have to introduce special\ntypes of ``non-commuting'' products (e.g.~the \\verb|&*| operator in\nMaple or the \\verb|**| operator in Mathematica). This can be rather\ncumbersome, for a variety of reasons. The main reason, however, is\nthat it does not match with what you do on paper. On paper, you never\nwrite special product symbols for objects which do not commute. You\njust string them together, and know from the properties of the symbols\nwhether objects can be moved through each other or not."
				}
			],
			"hidden": true,
			"source": "\nIn many other computer algebra systems, you have to introduce special\ntypes of ``non-commuting'' products (e.g.~the \\verb|&*| operator in\nMaple or the \\verb|**| operator in Mathematica). This can be rather\ncumbersome, for a variety of reasons. The main reason, however, is\nthat it does not match with what you do on paper. On paper, you never\nwrite special product symbols for objects which do not commute. You\njust string them together, and know from the properties of the symbols\nwhether objects can be moved through each other or not."
		},
		{
			"cell_id": 10603900724913809269,
			"cell_origin": "client",
			"cell_type": "latex",
			"cells": [
				{
					"cell_id": 16144138917267124877,
					"cell_origin": "client",
					"cell_type": "latex_view",
					"source": "\nIn order to make these sort of things possible in Cadabra, it is\nnecessary to declare ``sets'' of objects which mutually do not commute\n(i.e.~for which the order inside a product cannot be changed without\nconsequences) but which commute with objects of other sets. Many\ncomputer algebra systems only use one such set: objects are either\n``commuting'' or ``non-commuting''. This is often too restrictive. For\ninstance, when $\\Psi$ is a fermion and $\\Gamma$ denotes a Clifford\nalgebra element, a system with only one set of non-commuting objects\nis unable to see that\n\\begin{equation}\n\\bar\\Psi_a (\\Gamma_n\\Gamma_m)_{ab} \\Psi_b \\quad\\text{and}\\quad\n\\bar\\Psi_a \\Psi_b (\\Gamma_n\\Gamma_m)_{ab} \n\\end{equation}\nare equivalent. In Cadabra one would simply put $\\Psi_{a}$ and\n$\\Gamma_{m}$ in two different sets, mutually commuting, but\nnon-commuting among themselves. To be precise, the example above is\nreproduced by"
				}
			],
			"hidden": true,
			"source": "\nIn order to make these sort of things possible in Cadabra, it is\nnecessary to declare ``sets'' of objects which mutually do not commute\n(i.e.~for which the order inside a product cannot be changed without\nconsequences) but which commute with objects of other sets. Many\ncomputer algebra systems only use one such set: objects are either\n``commuting'' or ``non-commuting''. This is often too restrictive. For\ninstance, when $\\Psi$ is a fermion and $\\Gamma$ denotes a Clifford\nalgebra element, a system with only one set of non-commuting objects\nis unable to see that\n\\begin{equation}\n\\bar\\Psi_a (\\Gamma_n\\Gamma_m)_{ab} \\Psi_b \\quad\\text{and}\\quad\n\\bar\\Psi_a \\Psi_b (\\Gamma_n\\Gamma_m)_{ab} \n\\end{equation}\nare equivalent. In Cadabra one would simply put $\\Psi_{a}$ and\n$\\Gamma_{m}$ in two different sets, mutually commuting, but\nnon-commuting among themselves. To be precise, the example above is\nreproduced by"
		},
		{
			"cell_id": 18198511208890861354,
			"cell_origin": "client",
			"cell_type": "input",
			"cells": [
				{
					"cell_id": 4739882481462006047,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"source": "\\begin{dmath*}{}\\text{Property Accent attached to~}\\backslash\\texttt{bar}\\{\\#\\}.\\end{dmath*}"
				},
				{
					"cell_id": 9877825032413020410,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"source": "\\begin{dmath*}{}\\text{Property SelfNonCommuting attached to~}\\Psi_{a}.\\end{dmath*}"
				},
				{
					"cell_id": 17733511168608861733,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"source": "\\begin{dmath*}{}\\text{Property GammaMatrix attached to~}\\backslash\\texttt{Gamma}\\{\\#\\}.\\end{dmath*}"
				},
				{
					"cell_id": 2443793177241453786,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"cells": [
						{
							"cell_id": 9340474262344984867,
							"cell_origin": "server",
							"cell_type": "input_form",
							"source": "\\bar{\\Psi_{a}} \\indexbracket(\\Gamma_{n} \\Gamma_{m})_{ab} \\Psi_{b}"
						}
					],
					"source": "\\begin{dmath*}{}\\bar{\\Psi_{a}} \\left(\\Gamma_{n} \\Gamma_{m}\\right)\\,_{ab} \\Psi_{b}\\end{dmath*}"
				},
				{
					"cell_id": 9074689257260807998,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"cells": [
						{
							"cell_id": 2352024210399499253,
							"cell_origin": "server",
							"cell_type": "input_form",
							"source": "\\bar{\\Psi_{a}} \\Psi_{b} \\indexbracket(\\Gamma_{n} \\Gamma_{m})_{ab}"
						}
					],
					"source": "\\begin{dmath*}{}\\bar{\\Psi_{a}} \\Psi_{b} \\left(\\Gamma_{n} \\Gamma_{m}\\right)\\,_{ab}\\end{dmath*}"
				}
			],
			"source": "\\bar{#}::Accent;\n\\Psi_{a}::SelfNonCommuting;\n\\Gamma_{#}::GammaMatrix;\nex:= \\bar{\\Psi_a} (\\Gamma_n \\Gamma_m)_{ab} \\Psi_b;\nsort_product(_);"
		},
		{
			"cell_id": 10484759701533327357,
			"cell_origin": "client",
			"cell_type": "latex",
			"cells": [
				{
					"cell_id": 2195099621354746394,
					"cell_origin": "client",
					"cell_type": "latex_view",
					"source": "Commutation properties always refer to components. If you associate an\n\\prop{ImplicitIndex} property to an object, then it will never\ncommute with itself or with any other such object. You can see this in\nthe example above, as the \\algo{prodsort} command kept the\norder of the two gamma matrices unchanged.\n"
				}
			],
			"hidden": true,
			"source": "Commutation properties always refer to components. If you associate an\n\\prop{ImplicitIndex} property to an object, then it will never\ncommute with itself or with any other such object. You can see this in\nthe example above, as the \\algo{prodsort} command kept the\norder of the two gamma matrices unchanged.\n"
		},
		{
			"cell_id": 609176986855950731,
			"cell_origin": "client",
			"cell_type": "input",
			"source": ""
		}
	],
	"description": "Cadabra JSON notebook format",
	"version": 1.0
}
